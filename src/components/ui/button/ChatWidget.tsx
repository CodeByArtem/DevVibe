'use client';

import React, { useState, useEffect } from 'react';

const ChatWidget: React.FC = () => {
  const [message, setMessage] = useState<string>('');  // Начинаем с пустого сообщения
  const [isSending, setIsSending] = useState<boolean>(false);
  const [responseMessage, setResponseMessage] = useState<string>('');
  const [isFormVisible, setIsFormVisible] = useState<boolean>(false);  // Состояние для видимости формы

  // Часто задаваемые вопросы и ответы
  const faq: Record<string, string> = {
    'работа бота': 'Этот бот поможет вам узнать обо всех услугах, которые я предлагаю. Просто напишите, чем могу помочь, и я дам подробную информацию!',
    'чем я могу помочь': 'Я могу рассказать вам о моих услугах в веб-разработке, таких как создание сайтов, их поддержка, редизайн и многое другое. Напишите, что вам интересно!',
    'услуги': 'Я предлагаю целый ряд услуг: создание сайтов с нуля, адаптация существующих сайтов, интеграция с различными платформами, создание интернет-магазинов, редизайн, а также техническая поддержка. Если вам нужно что-то специфическое, сообщите мне!',
    'портфолио': 'Вы можете ознакомиться с моими проектами в разделе "Портфолио". Я работаю над различными типами сайтов, начиная от бизнес-проектов до креативных веб-ресурсов. Пишите, если хотите увидеть примеры.',
    'цены': 'Цены на услуги зависят от сложности и объема проекта. Я всегда стараюсь предложить конкурентоспособные и гибкие цены. Напишите, и я подготовлю смету с учётом ваших требований.',
    'технологии': 'В своей работе я использую современные технологии разработки сайтов и веб-приложений, такие как React, Vue, Next.js, WordPress, Shopify и другие популярные платформы и фреймворки. Все решения выбираются в зависимости от ваших нужд.',
    'процесс работы': 'Мой процесс работы включает несколько ключевых этапов: 1) Исследование и сбор требований, 2) Дизайн, 3) Программирование, 4) Тестирование, 5) Запуск и поддержка. Я всегда держу вас в курсе на каждом этапе!',
    'сроки': 'Сроки зависят от сложности проекта. Обычно создание простого сайта занимает от 2 до 4 недель, а более сложные решения могут потребовать до 8 недель или дольше. Я всегда стараюсь придерживаться оговорённых сроков.',
    'обратная связь': 'Мне важна ваша обратная связь! Если у вас есть вопросы по проекту или предложения по улучшению, не стесняйтесь написать. Я всегда готов к обсуждению и уточнениям.',
    'поддержка': 'Я предоставляю техническую поддержку и обслуживание сайтов, что позволяет вашему ресурсу оставаться актуальным и работать без сбоев. Это включает обновления, исправления ошибок, а также добавление новых функций по вашему запросу.',
    'редизайн': 'Если ваш сайт уже существует, но он нуждается в обновлении, я предложу вам редизайн, который сделает его более современным и функциональным. Это может быть как полное обновление, так и частичные изменения.',
    'интернет-магазины': 'Я создаю интернет-магазины, которые не только выглядят привлекательно, но и удобны для пользователей. Я интегрирую различные системы для оплаты, доставки и учета товаров, чтобы ваш бизнес работал эффективно.',
    'SEO-оптимизация': 'Я также предоставляю услуги по SEO-оптимизации, чтобы ваш сайт был видим в поисковых системах. Это включает оптимизацию контента, технические аспекты, настройку метатегов и многое другое.',
    'интеграция': 'Если ваш сайт нуждается в интеграции с другими сервисами, я помогу настроить API, подключить платежные системы, CRM и другие инструменты для автоматизации работы.',
    'контент-менеджмент': 'Если вам нужно обновлять контент на сайте, я помогу настроить систему управления контентом (CMS), чтобы вы могли легко добавлять новые страницы, статьи или товары без необходимости в технических знаниях.',
    'создание блогов': 'Если вам нужно создать блог для вашего сайта, я предложу вам решение, которое будет удобно для ведения контента и привлекать новых посетителей. Платформы как WordPress или статические генераторы сайтов идеально подойдут для таких проектов.',
    'обучение': 'Я также предоставляю обучение по управлению сайтом, чтобы вы могли самостоятельно редактировать страницы, обновлять информацию и работать с различными инструментами для улучшения работы сайта.',
    'консультации': 'Если у вас есть сомнения по поводу вашего проекта, я готов предоставить консультации по выбору технологий, платформы или дизайна, чтобы ваш сайт был максимально эффективным.',
    'пожелания': 'Если у вас есть особые пожелания или идеи для вашего проекта, сообщите мне. Я всегда открыт для обсуждения и подберу решение, которое будет соответствовать вашим ожиданиям.',
    'заказ услуг': 'Чтобы заказать мои услуги, просто напишите, какой проект вас интересует, и я подготовлю предложение с подробным планом работы и ценой. Я всегда рад новым проектам!',
    'прием заказов': 'Я принимаю заказы на создание сайтов и другие услуги круглосуточно. Пишите в любое время, и я отвечу как можно быстрее.',
    'как начать сотрудничество': 'Для начала сотрудничества просто напишите мне, какой проект вы хотите реализовать. Я подготовлю план действий и соглашение на выполнение работ. Всю информацию о проекте можно обсудить прямо в чате.',
    'оплата': 'Я предлагаю несколько вариантов оплаты, включая оплату поэтапно (по мере выполнения работы). Обсудим удобный для вас способ и условия.'
  };

  const handleMessageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMessage(event.target.value);
  };

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsFormVisible(true);  // Показываем форму через 10 секунд
    }, 10000);  // 10 секунд

    return () => clearTimeout(timer);
  }, []);

  const handleSendMessage = async () => {
    if (!message.trim()) {
      console.log('Message is empty. Not sending.');
      return;
    }

    console.log('Sending message:', message);
    setIsSending(true);
    setResponseMessage('');

    // Проверка на часто задаваемые вопросы
    const lowerCaseMessage = message.toLowerCase();
    if (faq[lowerCaseMessage]) {
      setResponseMessage(faq[lowerCaseMessage]);
      setMessage('');  // Очистить поле ввода после отправки
      setIsSending(false);
      return;
    }

    try {
      const response = await fetch('/api/send-message', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message }),
      });

      const data = await response.json();
      console.log('Response from server:', data);

      if (data.success) {
        setResponseMessage('Сообщение отправлено! Спасибо за обращение.');
        setMessage('');  // Очистить поле ввода после отправки
      } else {
        setResponseMessage('Ошибка при отправке сообщения.');
      }
    } catch (error) {
      console.error('Error during message sending:', error);
      setResponseMessage('Ошибка при отправке сообщения.');
    } finally {
      setIsSending(false);
    }
  };

  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      handleSendMessage();  // Убедитесь, что промис обрабатывается
    }
  };

  const handleClose = () => {
    setIsFormVisible(false);  // Скрыть форму чата
  };

  return (
    <div
      className={`fixed bottom-40
     right-4 p-4 bg-white bg-opacity-50 shadow-lg rounded-lg border border-gray-200 w-full max-w-xs z-[999] ${!isFormVisible ? 'opacity-0' : 'opacity-100'} transition-opacity duration-1000 ease-in-out`}
    >
      <div className="flex flex-col space-y-2">
        <button
          onClick={handleClose}
          className="absolute  top-[-1px] right-[-1px] p-0 bg-gray-200 rounded-full text-gray-600 hover:text-gray-800"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            className="w-6 h-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>

        <input
          type="text"
          value={message}
          onChange={handleMessageChange}
          onKeyDown={handleKeyPress}
          placeholder={message.trim() === '' ? 'Здравствуйте, чем могу помочь?' : ''}  // Показывается только когда поле пустое
          className="p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-opacity-50 text-sm md:text-base"
        />

        <button
          onClick={handleSendMessage}
          disabled={isSending || !message.trim()}
          className={`p-2 text-white rounded-lg ${isSending ? 'bg-gray-400' : 'bg-blue-500 hover:bg-blue-600'} focus:outline-none text-sm md:text-base`}
        >
          {isSending ? 'Отправка...' : 'Отправить'}
        </button>

        {responseMessage && (
          <p className={`text-sm ${responseMessage.includes('ошибка') ? 'text-red-500' : 'text-black'} bg-white`}>
            {responseMessage}
          </p>
        )}
      </div>
    </div>
  );
};

export default ChatWidget;
